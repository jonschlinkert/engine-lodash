'use strict';

/**
 * Module dependencies.
 */

var fs = require('fs');
var utils = require('engine-utils');
var debug = require('debug')('engine:lodash');
var chalk = require('chalk');
var Delimiters = require('delims');
var delimiters = new Delimiters();
var _ = require('lodash');

/**
 * Lodash support.
 */

var engine = utils.fromStringRenderer('lodash');

/**
 * Lodash string support. Render the given `str` and invoke the callback `callback(err, str)`.
 *
 * ```js
 * var engine = require('engine-lodash');
 * engine.render('<%= name %>', {name: 'Jon'}, function (err, content) {
 *   console.log(content); //=> 'Jon'
 * });
 * ```
 *
 * @param {String} `str`
 * @param {Object|Function} `options` or callback.
 *     @property {Object} `cache` enable template caching
 *     @property {String} `filename` filename required for caching
 * @param {Function} `callback`
 * @api public
 */

engine.render = function lodashRender(str, options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  options = options || {};

  if (options.mixins) {
    _.mixin(options.mixins);
  }

  var delims = _.pick(options, ['interpolate', 'evaluate', 'escape']);
  var opts = _.omit(options, ['helpers', 'imports']);
  var fns = _.pick(options, ['helpers', 'imports']);

  var settings = {};
  if (options.delims) {
    delims = _.merge({}, delimiters.templates(options.delims), delims);
  }

  settings.imports = _.extend({}, fns.helpers, fns.imports);
  settings = _.extend({}, settings, delims);

  if (options.debugEngine) {
    var helpers = Object.keys(settings.imports);
    for (var key in opts) {
      if (helpers.indexOf(key) !== -1) {
        console.log(chalk.yellow('[engine-lodash] property "' + key + '" is on both:'));
        console.log(chalk.yellow('  - settings.imports as a(n): ', typeof settings.imports[key]));
        console.log(chalk.yellow('  - options as a(n): ', typeof options[key]));
      }
    }
  }

  opts = _.merge({}, opts, settings.imports);
  try {
    // Pass file extension for use in assemble v0.6.x
    cb(null, _.template(str, opts, settings), '.html');
  } catch (err) {
    console.log(chalk.red('%s'), err);
    debug('engine lodash [render]: %s', err);
    cb(err);
  }
};

/**
 * Render Lo-Dash or underscore templates synchronously.
 *
 * ```js
 * var engine = require('engine-lodash');
 * engine.renderSync('<%= name %>', {name: 'Jon'});
 * //=> 'Jon'
 * ```
 *
 * @param  {Object} `str` The string to render.
 * @param  {Object} `options` Object of options.
 *   @option {Object} `settings` Settings to pass to Lo-Dash.
 *   @option {Object} `delims` Template delimiters, generated by [delims]
 *   @option {Object} `imports` Template helpers to pass to Lo-Dash.
 * @return {String} Rendered string.
 * @api public
 */

engine.renderSync = function lodashRenderSync(str, options) {
  var opts = _.merge({}, options);
  var settings = {};

  _.merge(settings, opts);
  _.merge(settings, opts.settings);
  settings.imports = opts.imports || opts.helpers || {};

  if (opts.mixins) {
    _.mixin(opts.mixins);
  }

  if (opts.delims) {
    var delims = delimiters.templates(opts.delims);
    _.merge(settings, delims, opts);
  }

  try {
    return _.template(str, opts, settings);
  } catch (err) {
    console.log(chalk.red('%s'), err);
    debug('engine lodash [renderSync]: %s', err);
    return err;
  }
};

/**
 * Lodash file support. Render a file at the given `filepath` and callback `callback(err, str)`.
 *
 * ```js
 * var engine = require('engine-lodash');
 * engine.renderFile('foo/bar/baz.tmpl', {name: 'Jon'});
 * //=> 'Jon'
 * ```
 *
 * @param {String} `path`
 * @param {Object|Function} `options` or callback function.
 * @param {Function} `callback`
 * @api public
 */

engine.renderFile = function lodashRenderFile(filepath, options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  try {
    var str = fs.readFileSync(filepath, 'utf8');
    engine.render(str, options, cb);
  } catch (err) {
    console.log(chalk.red('%s'), err);
    debug('engine lodash [renderFile]: %s', err);
    cb(err);
    return;
  }
};

/**
 * Express support.
 */

engine.__express = engine.renderFile;

/**
 * Expose `engine`
 */

module.exports = engine;
